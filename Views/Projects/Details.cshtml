@model ProjectManagementSystem.Models.ViewModels.ProjectDetailsVm

@{
    ViewData["Title"] = "Project Details";
    Layout = "_Layout";
}

@section Styles {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
}

<style>
    [v-cloak] {
        display: none;
    }

    /* Modal 相關樣式 */
    .form-control:focus,
    .form-select:focus {
        border-color: #86b7fe;
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    }

    .was-validated .form-control:invalid:focus,
    .was-validated .form-select:invalid:focus {
        border-color: #dc3545;
        box-shadow: 0 0 0 0.25rem rgba(220, 53, 69, 0.25);
    }

    .was-validated .form-control:valid:focus,
    .was-validated .form-select:valid:focus {
        border-color: #198754;
        box-shadow: 0 0 0 0.25rem rgba(25, 135, 84, 0.25);
    }

    /* Modal 過渡動畫 */
    .modal.fade .modal-dialog {
        transition: transform 0.3s ease-out;
    }

    .modal.fade.show .modal-dialog {
        transform: none;
    }
</style>

<div class="container" id="app" v-cloak>
    <!-- 載入指示器 -->
    <div v-if="loading" class="text-center my-4">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>

    <!-- 錯誤訊息 -->
    <div v-if="error" class="alert alert-danger" role="alert">
        {{ error }}
    </div>

    <!-- 專案詳情卡片 -->
    <div v-if="!loading && !error" class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h3 class="mb-0">{{project.name}}</h3>
            <div>
                <button type="button" class="btn btn-primary" id="editProjectBtn">
                    <i class="bi bi-pencil"></i> Edit Project
                </button>
                <a href="/Projects" class="btn btn-secondary">
                    <i class="bi bi-arrow-left"></i> Back to List
                </a>
            </div>
        </div>
        <div class="card-body">
            <dl class="row">
                <dt class="col-sm-3">Description</dt>
                <dd class="col-sm-9">{{project.description || 'No description provided'}}</dd>

                <dt class="col-sm-3">Status</dt>
                <dd class="col-sm-9">
                    <span :class="'badge bg-' + getStatusColor(project.status)">
                        {{project.status}}
                    </span>
                </dd>

                <dt class="col-sm-3">Project Manager</dt>
                <dd class="col-sm-9">{{project.ownerName || 'Not assigned'}}</dd>

                <dt class="col-sm-3">Start Date</dt>
                <dd class="col-sm-9">{{formatDate(project.startDate)}}</dd>

                <dt class="col-sm-3">End Date</dt>
                <!-- 修改處 1: 改變結束日期的顯示邏輯 -->
                <dd class="col-sm-9">{{ project.endDate ? formatDate(project.endDate) : 'Not Set' }}</dd>
            </dl>
        </div>
    </div>

    <!-- 任務列表卡片 -->
    <div v-if="!loading && !error" class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h3 class="mb-0">Tasks</h3>
            <button class="btn btn-success" id="addTaskBtn">
                <i class="bi bi-plus"></i> Add Task
            </button>
        </div>
        <div class="card-body">
            <table class="table" v-if="project.tasks && project.tasks.length">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Status</th>
                        <th>Due Date</th>
                        <th>Priority</th>
                        <th>Assigned To</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <tr v-for="task in project.tasks" :key="task.taskId">
                        <td>{{task.title}}</td>
                        <td>
                            <span :class="'badge bg-' + getStatusColor(task.status)">
                                {{task.status}}
                            </span>
                        </td>
                        <td>{{formatDate(task.dueDate)}}</td>
                        <td>
                            <span :class="'badge bg-' + getPriorityColor(task.priority)">
                                {{task.priority}}
                            </span>
                        </td>
                        <td>{{task.assignedToName || 'Unassigned'}}</td>
                        <td>
                            <div class="btn-group">
                                <button class="btn btn-sm btn-info edit-task-btn" :data-task-id="task.taskId">
                                    <i class="bi bi-pencil"></i>
                                </button>
                                <button class="btn btn-sm btn-danger delete-task-btn" :data-task-id="task.taskId">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
            <p v-else class="text-center py-4">No tasks available for this project.</p>
        </div>
    </div>

    <!-- 引入編輯專案 Modal -->
    <partial name="_ProjectEditModal" model="Model" />

    <!-- 引入創建任務 Modal -->
    <partial name="_TaskCreateModal" model="Model" />
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://unpkg.com/vue@3/dist/vue.global.prod.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
        const { createApp } = Vue;

        createApp({
            data() {
                return {
                    project: {
                        projectId: @Model.ProjectId,
                        name: @Html.Raw(Json.Serialize(Model.Name ?? "")),
                        description: @Html.Raw(Json.Serialize(Model.Description ?? "")),
                        status: @Html.Raw(Json.Serialize(Model.Status ?? "")),
                        ownerId: @Html.Raw(Json.Serialize(Model.OwnerId.ToString())),
                        ownerName: @Html.Raw(Json.Serialize(Model.OwnerName ?? "")),
                        startDate: @Html.Raw(Json.Serialize(Model.StartDate.ToString("yyyy-MM-dd"))),
                        endDate: @Html.Raw(Json.Serialize(Model.EndDate.HasValue ? Model.EndDate.Value.ToString("yyyy-MM-dd") : "")),
                        tasks: []
                    },
                    projectManagers: @Html.Raw(Json.Serialize(Model.ProjectManagers ?? new List<SelectListItem>())),
                    statusOptions: @Html.Raw(Json.Serialize(Model.StatusOptions ?? new List<SelectListItem>())),
                    taskForm: {
                        title: '',
                        description: '',
                        status: '',
                        priority: '',
                        dueDate: new Date().toISOString().split('T')[0],
                        assignedToId: '',
                        projectId: @Model.ProjectId
                    },
                    // 使用 TaskCreateVm 中的選項
                    taskStatusOptions: @Html.Raw(Json.Serialize(Model.TaskCreateVm.Statuses ?? new List<SelectListItem>())),
                    taskPriorityOptions: @Html.Raw(Json.Serialize(Model.TaskCreateVm.Priorities ?? new List<SelectListItem>())),
                    teamMembers: @Html.Raw(Json.Serialize(Model.TaskCreateVm.TeamMembers ?? new List<SelectListItem>())),
                    loading: true,
                    error: null,
                    editModal: null,
                    taskCreateModal: null,
                    isSubmitting: false
                }
            },
            methods: {
                formatDate(date) {
                    if (!date) return 'Not Set';

                    try {
                        if (/^\d{4}-\d{2}-\d{2}$/.test(date)) {
                            return date;
                        }

                        const d = new Date(date);
                        if (isNaN(d.getTime())) return 'Not Set';

                        return d.toISOString().split('T')[0];
                    } catch {
                        return 'Not Set';
                    }
                },

                validateForm() {
                    const form = document.getElementById('projectEditForm');
                    if (!form.checkValidity()) {
                        event.preventDefault();
                        event.stopPropagation();
                        form.classList.add('was-validated');
                        return false;
                    }
                    return true;
                },

                validateDates() {
                    if (!this.project.endDate || this.project.endDate === 'Not Set') {
                        return true;
                    }

                    const startDate = new Date(this.project.startDate);
                    const endDate = new Date(this.project.endDate);

                    if (endDate < startDate) {
                        document.getElementById('endDate').setCustomValidity('End date must be after start date');
                        return false;
                    }

                    document.getElementById('endDate').setCustomValidity('');
                    return true;
                },

                resetFormValidation() {
                    const form = document.getElementById('projectEditForm');
                    form.classList.remove('was-validated');
                    const inputs = form.querySelectorAll('input, select, textarea');
                    inputs.forEach(input => input.setCustomValidity(''));
                },

                showEditModal() {
                    if (this.editModal) {
                        this.project.startDate = this.formatDate(this.project.startDate);
                        this.project.endDate = this.project.endDate ? this.formatDate(this.project.endDate) : '';

                        console.log('Opening modal with project data:', {
                            ...this.project,
                            projectManagers: this.projectManagers
                        });

                        this.editModal.show();
                    }
                },

                handleSave() {
                    this.saveProject();
                },

                async saveProject() {
                    try {
                        if (!this.validateForm() || !this.validateDates()) {
                            return;
                        }

                        const projectData = {
                            projectId: this.project.projectId,
                            name: this.project.name,
                            description: this.project.description,
                            status: this.project.status,
                            ownerId: parseInt(this.project.ownerId, 10),
                            startDate: this.formatDate(this.project.startDate),
                            ...(this.project.endDate && this.project.endDate !== 'Not Set'
                                ? { endDate: this.formatDate(this.project.endDate) }
                                : {})
                        };

                        console.log('Saving project with data:', projectData);

                        const response = await axios.put(`/api/ProjectsApi/${this.project.projectId}`, projectData);

                        if (response.data) {
                            const updatedProject = response.data;
                            const currentTasks = this.project.tasks;

                            this.project = {
                                ...this.project,
                                ...updatedProject,
                                ownerId: updatedProject.ownerId.toString(),
                                startDate: this.formatDate(updatedProject.startDate),
                                endDate: updatedProject.endDate ? this.formatDate(updatedProject.endDate) : '',
                                tasks: currentTasks
                            };
                        } else {
                            await this.loadProject();
                        }

                        this.editModal.hide();
                        alert('Project updated successfully');
                    } catch (error) {
                        console.error('Error updating project:', error);
                        alert(`Failed to update project: ${error.response?.data || error.message}`);
                    }
                },

                async loadProject() {
                    try {
                        this.loading = true;
                        console.log('Loading project ID:', this.project.projectId);

                        const response = await axios.get(`/api/ProjectsApi/${this.project.projectId}`);
                        console.log('API Response:', response.data);

                        const updatedProject = response.data;
                        const currentTasks = this.project.tasks;

                        this.project = {
                            ...this.project,
                            ...updatedProject,
                            ownerId: updatedProject.ownerId.toString(),
                            startDate: this.formatDate(updatedProject.startDate),
                            endDate: updatedProject.endDate ? this.formatDate(updatedProject.endDate) : '',
                            tasks: updatedProject.tasks || currentTasks
                        };

                        console.log('Updated project data:', this.project);
                        console.log('Project Manager ID:', this.project.ownerId);
                        console.log('Available Project Managers:', this.projectManagers);

                        this.error = null;
                    } catch (error) {
                        console.error('Error loading project:', error);
                        this.error = `Failed to load project: ${error.response?.data || error.message}`;
                    } finally {
                        this.loading = false;
                    }
                },

                getStatusColor(status) {
                    const colors = {
                        'Not Started': 'secondary',
                        'In Progress': 'primary',
                        'Completed': 'success',
                        'Cancelled': 'danger'
                    };
                    return colors[status] || 'info';
                },

                getPriorityColor(priority) {
                    const colors = {
                        'High': 'danger',
                        'Medium': 'warning',
                        'Low': 'info'
                    };
                    return colors[priority] || 'secondary';
                },

                initializeEventListeners() {
                    if (!this.editModal) {
                        this.editModal = new bootstrap.Modal(document.getElementById('projectEditModal'));
                    }

                    const editBtn = document.getElementById('editProjectBtn');
                    if (editBtn) {
                        editBtn.removeEventListener('click', this.showEditModal);
                        editBtn.addEventListener('click', () => this.showEditModal());
                    }

                    const saveBtn = document.getElementById('saveProjectBtn');
                    if (saveBtn) {
                        saveBtn.removeEventListener('click', this.handleSave);
                        saveBtn.addEventListener('click', () => this.handleSave());
                    }

                    const modal = document.getElementById('projectEditModal');
                    if (modal) {
                        modal.removeEventListener('hidden.bs.modal', this.resetFormValidation);
                        modal.addEventListener('hidden.bs.modal', () => this.resetFormValidation());
                    }
                },

                initializeTaskModalEventListeners() {
                    // 初始化 Modal
                    if (!this.taskCreateModal) {
                        this.taskCreateModal = new bootstrap.Modal(document.getElementById('taskCreateModal'));
                    }

                    // Add Task 按鈕
                    const addTaskBtn = document.getElementById('addTaskBtn');
                    if (addTaskBtn) {
                        addTaskBtn.removeEventListener('click', this.showCreateTaskModal);
                        addTaskBtn.addEventListener('click', () => this.showCreateTaskModal());
                    }

                    // Save Task 按鈕
                    const saveTaskBtn = document.getElementById('saveTaskBtn');
                    if (saveTaskBtn) {
                        saveTaskBtn.removeEventListener('click', this.handleSaveTask);
                        saveTaskBtn.addEventListener('click', () => this.handleSaveTask());
                    }

                    // Modal 關閉事件
                    const taskModal = document.getElementById('taskCreateModal');
                    if (taskModal) {
                        taskModal.removeEventListener('hidden.bs.modal', this.resetTaskForm);
                        taskModal.addEventListener('hidden.bs.modal', () => this.resetTaskForm());
                    }
                },

                handleSaveTask() {
                    if (this.isSubmitting) return;
                    this.createTask();
                },

                async createTask() {
                    if (!this.validateTaskForm()) return;

                    try {
                        this.isSubmitting = true;
                        const saveBtn = document.getElementById('saveTaskBtn');
                        const originalContent = saveBtn.innerHTML;
                        saveBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-1"></span>建立中...';

                        const response = await axios.post(
                            `/api/ProjectsApi/${this.project.projectId}/tasks`,
                            this.taskForm
                        );

                        if (response.data) {
                            await this.loadProject();
                            this.taskCreateModal.hide();
                            alert('任務建立成功');
                        }
                    } catch (error) {
                        console.error('Error creating task:', error);
                        alert(error.response?.data?.errors || '建立任務時發生錯誤');
                    } finally {
                        this.isSubmitting = false;
                        const saveBtn = document.getElementById('saveTaskBtn');
                        saveBtn.innerHTML = '建立任務';
                    }
                },
                mounted() {
                    this.loadProject().then(() => {
                        this.$nextTick(() => {
                            this.initializeEventListeners();
                            console.log('Component mounted, current project manager:', this.project.ownerId);
                            this.initializeTaskModalEventListeners();
                        });
                    });
                }
            }
        }).mount('#app');
    </script>
    }