@model ProjectManagementSystem.Models.ViewModels.ProjectDetailsVm

@{
    ViewData["Title"] = "Project Details";
    Layout = "_Layout";
}

@section Styles {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
}

<style>
    [v-cloak] {
        display: none;
    }
    /* Modal 與表單驗證樣式 */
    .form-control:focus,
    .form-select:focus {
        border-color: #86b7fe;
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    }

    .was-validated .form-control:invalid:focus,
    .was-validated .form-select:invalid:focus {
        border-color: #dc3545;
        box-shadow: 0 0 0 0.25rem rgba(220, 53, 69, 0.25);
    }

    .was-validated .form-control:valid:focus,
    .was-validated .form-select:valid:focus {
        border-color: #198754;
        box-shadow: 0 0 0 0.25rem rgba(25, 135, 84, 0.25);
    }
    /* Modal 過渡動畫 */
    .modal.fade .modal-dialog {
        transform: scale(0.8);
        opacity: 0;
        transition: transform 0.3s ease-out, opacity 0.3s ease-out;
    }

    .modal.fade.show .modal-dialog {
        transform: scale(1);
        opacity: 1;
    }
</style>

<div class="container" id="app" v-cloak>
    <!-- 載入指示器 -->
    <div v-if="loading" class="text-center my-4">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
    <!-- 錯誤訊息 -->
    <div v-if="error" class="alert alert-danger" role="alert">
        {{ error }}
    </div>
    <!-- 專案詳情卡片 -->
    <div v-if="!loading && !error" class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h3 class="mb-0">{{ project.name }}</h3>
            <div class="d-flex gap-2">
                <button type="button" class="btn btn-primary" id="editProjectBtn">
                    <i class="bi bi-pencil"></i> Edit Project
                </button>
                <a href="/Projects" class="btn btn-secondary">
                    <i class="bi bi-arrow-left"></i> Back to List
                </a>
            </div>
        </div>
        <div class="card-body">
            <dl class="row">
                <dt class="col-sm-3">Description</dt>
                <dd class="col-sm-9">{{ project.description || 'No description provided' }}</dd>

                <dt class="col-sm-3">Status</dt>
                <dd class="col-sm-9">
                    <span :class="'badge bg-' + getStatusColor(project.status)">
                        {{ project.status }}
                    </span>
                </dd>

                <dt class="col-sm-3">Project Manager</dt>
                <dd class="col-sm-9">{{ project.ownerName || 'Not assigned' }}</dd>

                <dt class="col-sm-3">Start Date</dt>
                <dd class="col-sm-9">{{ formatDate(project.startDate) }}</dd>

                <dt class="col-sm-3">End Date</dt>
                <dd class="col-sm-9">{{ project.endDate ? formatDate(project.endDate) : 'Not Set' }}</dd>
            </dl>
        </div>
    </div>

    <!-- 任務列表卡片 -->
    <div v-if="!loading && !error" class="card">
        <div class="card-header">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h3 class="mb-0">Tasks</h3>
                <button class="btn btn-success" id="addTaskBtn">
                    <i class="bi bi-plus"></i> Add Task
                </button>
            </div>
            <!-- 任務搜尋與篩選 -->
            <div class="row g-2 mb-2">
                <div class="col-md-4">
                    <input type="text" class="form-control" v-model="filter.searchTerm" placeholder="Search tasks...">
                </div>
                <div class="col-md-4">
                    <select class="form-select" v-model="filter.deadlineStatus">
                        <option value="all">所有任務</option>
                        <option value="upcoming">即將到期(3天內)</option>
                        <option value="overdue">已逾期</option>
                    </select>
                </div>
            </div>
        </div>
        <div class="card-body">
            <table class="table table-bordered" v-if="filteredTasks.length">
                <thead>
                    <tr>
                        <th>
                            <div class="d-flex justify-content-between align-items-center" style="cursor: pointer;" @Html.Raw("v-on:click=\"changeSort('title')\"")>
                                <span>Title</span>
                                <span><i :class="getSortIcon('title')"></i></span>
                            </div>
                        </th>
                        <th>
                            <div class="d-flex justify-content-between align-items-center" style="cursor: pointer;" @Html.Raw("v-on:click=\"changeSort('status')\"")>
                                <span>Status</span>
                                <span><i :class="getSortIcon('status')"></i></span>
                            </div>
                        </th>
                        <th>
                            <div class="d-flex justify-content-between align-items-center" style="cursor: pointer;" @Html.Raw("v-on:click=\"changeSort('dueDate')\"")>
                                <span>Due Date</span>
                                <span><i :class="getSortIcon('dueDate')"></i></span>
                            </div>
                        </th>
                        <th>
                            <div class="d-flex justify-content-between align-items-center" style="cursor: pointer;" @Html.Raw("v-on:click=\"changeSort('priority')\"")>
                                <span>Priority</span>
                                <span><i :class="getSortIcon('priority')"></i></span>
                            </div>
                        </th>
                        <th>Assigned To</th>
                        <th>Remaining Time</th>
                        <th>Actions</th>
                    </tr>
                </thead>

                <tbody>
                    <tr v-for="task in filteredTasks" :key="task.taskId" :class="getTaskRowClass(task)" @Html.Raw("v-on:click=\"showTaskDescription(task)\"")>
                        <td>{{ task.title }}</td>
                        <td>
                            <span :class="'badge bg-' + getStatusColor(task.status)">
                                {{ task.status }}
                            </span>
                        </td>
                        <td>{{ formatDate(task.dueDate) }}</td>
                        <td>
                            <span :class="'badge bg-' + getPriorityColor(task.priority)">
                                {{ task.priority }}
                            </span>
                        </td>
                        <td>{{ task.assignedToName || '' }}</td>
                        <td v-if="task.status != '已完成'">
                            <span :class="{'text-danger': calculateDaysUntilDue(task.dueDate) < 0}">
                                {{ getDaysRemaining(task) }}
                            </span>
                        </td>
                        <td v-else>-</td>
                        <td>
                            <div class="btn-group">
                                <button class="btn btn-sm btn-info edit-task-btn" :data-task-id="task.taskId" :disabled="isSubmitting" @Html.Raw("v-on:click.stop=\"handleEditClick(task.taskId)\"")>
                                    <i class="bi bi-pencil"></i>
                                </button>
                                <button class="btn btn-sm btn-danger delete-task-btn" :data-task-id="task.taskId" @Html.Raw("v-on:click.stop=\"handleDeleteClick(task.taskId)\"")>
                                    <i class="bi bi-trash"></i>
                                </button>
                                <a class="btn btn-sm btn-secondary" :href="'/File/Index?taskId=' + task.taskId" title="檔案管理" @Html.Raw("v-on:click.stop=\"\"")>
                                    <i class="bi bi-file-earmark-text"></i>
                                </a>
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
            <p v-else class="text-center py-4">No tasks available for this project.</p>
        </div>
    </div>

    <!-- 任務描述資訊 Modal -->
    <div class="modal fade" id="taskInfoModal" tabindex="-1" aria-labelledby="taskInfoModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="taskInfoModalLabel">Task Description</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    {{ currentTaskDescription }}
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>


    <!-- 引入編輯專案、創建任務與編輯任務 Modal (根據實際情況保留或調整) -->
    <partial name="_ProjectEditModal" model="Model" />
    <partial name="_TaskCreateModal" model="Model" />
    <partial name="_TaskEditModal" model="Model" />
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://unpkg.com/vue@3/dist/vue.global.prod.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
        const { createApp } = Vue;

        createApp({
            data() {
                const today = new Date().toISOString().split('T')[0];
                return {
                    project: {
                        projectId: @Model.ProjectId,
                        name: @Html.Raw(Json.Serialize(Model.Name ?? "")),
                        description: @Html.Raw(Json.Serialize(Model.Description ?? "")),
                        status: @Html.Raw(Json.Serialize(Model.Status ?? "")),
                        ownerId: @Html.Raw(Json.Serialize(Model.OwnerId.ToString())),
                        ownerName: @Html.Raw(Json.Serialize(Model.OwnerName ?? "")),
                        startDate: @Html.Raw(Json.Serialize(Model.StartDate.ToString("yyyy-MM-dd"))),
                        endDate: @Html.Raw(Json.Serialize(Model.EndDate.HasValue ? Model.EndDate.Value.ToString("yyyy-MM-dd") : "")),
                        tasks: [] // 任務資料將由 API 載入
                    },
                    projectManagers: @Html.Raw(Json.Serialize(Model.ProjectManagers ?? new List<SelectListItem>())),
                    statusOptions: @Html.Raw(Json.Serialize(Model.StatusOptions ?? new List<SelectListItem>())),
                    taskForm: {
                        title: '',
                        description: '',
                        status: '未開始',
                        priority: '',
                        dueDate: today,
                        assignedToId: '',
                        projectId: @Model.ProjectId
                            },
                    editTaskForm: {
                        taskId: null,
                        title: '',
                        description: '',
                        status: '',
                        priority: '',
                        dueDate: '',
                        assignedToId: null
                    },
                    taskEditModal: null,
                    taskStatusOptions: @Html.Raw(Json.Serialize(Model.TaskCreateVm.Statuses ?? new List<SelectListItem>())),
                    taskPriorityOptions: @Html.Raw(Json.Serialize(Model.TaskCreateVm.Priorities ?? new List<SelectListItem>())),
                    teamMembers: @Html.Raw(Json.Serialize(Model.TaskCreateVm.TeamMembers ?? new List<SelectListItem>())),
                    loading: true,
                    error: null,
                    editModal: null,
                    taskCreateModal: null,
                    isSubmitting: false,
                    // 新增任務搜尋與排序篩選條件
                    filter: {
                        deadlineStatus: 'all',
                        sortBy: 'dueDate',  // 預設依到期日排序
                        sortOrder: 'asc',   // 預設升冪排序
                        searchTerm: ''
                    },
                    // 用來儲存點擊後要顯示的任務描述
                    currentTaskDescription: '',
                    taskInfoModal: null
                }
            },
            computed: {
                filteredTasks() {
                    if (!this.project.tasks) return [];
                    let tasks = this.project.tasks;
                    // 過濾搜尋
                    tasks = tasks.filter(task => {
                        if (!this.filter.searchTerm.trim()) return true;
                        return task.title.toLowerCase().includes(this.filter.searchTerm.trim().toLowerCase());
                    });
                    // 過濾截止狀態
                    tasks = tasks.filter(task => {
                        const daysUntilDue = this.calculateDaysUntilDue(task.dueDate);
                        switch (this.filter.deadlineStatus) {
                            case 'upcoming':
                                return daysUntilDue <= 3 && daysUntilDue >= 0 && task.status !== '已完成';
                            case 'overdue':
                                return daysUntilDue < 0 && task.status !== '已完成';
                            default:
                                return true;
                        }
                    });
                    // 排序
                    tasks.sort((a, b) => {
                        let compare = 0;
                        if (this.filter.sortBy === 'dueDate') {
                            compare = new Date(a.dueDate) - new Date(b.dueDate);
                        } else if (this.filter.sortBy === 'priority') {
                            const priorityValues = { '高': 3, '中': 2, '低': 1 };
                            compare = priorityValues[a.priority] - priorityValues[b.priority];
                        } else if (this.filter.sortBy === 'title') {
                            compare = a.title.localeCompare(b.title);
                        } else if (this.filter.sortBy === 'status') {
                            compare = a.status.localeCompare(b.status);
                        }
                        return this.filter.sortOrder === 'asc' ? compare : -compare;
                    });
                    return tasks;
                }
            },
            methods: {
                changeSort(column) {
                    if (this.filter.sortBy === column) {
                        this.filter.sortOrder = this.filter.sortOrder === 'asc' ? 'desc' : 'asc';
                    } else {
                        this.filter.sortBy = column;
                        this.filter.sortOrder = 'asc';
                    }
                },
                getSortIcon(column) {
                    if (this.filter.sortBy !== column) {
                        return 'bi bi-arrow-down-up';
                    }
                    return this.filter.sortOrder === 'asc' ? 'bi bi-arrow-up' : 'bi bi-arrow-down';
                },
                formatDate(date) {
                    if (!date) return 'Not Set';
                    try {
                        if (/^\d{4}-\d{2}-\d{2}$/.test(date)) {
                            return date;
                        }
                        const d = new Date(date);
                        if (isNaN(d.getTime())) return 'Not Set';
                        return d.toISOString().split('T')[0];
                    } catch {
                        return 'Not Set';
                    }
                },
                getStatusColor(status) {
                    const colors = {
                        '未開始': 'secondary',
                        '進行中': 'primary',
                        '已完成': 'success',
                        '已取消': 'danger'
                    };
                    return colors[status] || 'info';
                },
                getPriorityColor(priority) {
                    const colors = {
                        '高': 'danger',
                        '中': 'warning',
                        '低': 'info'
                    };
                    return colors[priority] || 'secondary';
                },
                calculateDaysUntilDue(dueDate) {
                    const today = new Date();
                    const due = new Date(dueDate);
                    today.setHours(0, 0, 0, 0);
                    due.setHours(0, 0, 0, 0);
                    return Math.ceil((due - today) / (1000 * 60 * 60 * 24));
                },
                getDaysRemaining(task) {
                    const days = this.calculateDaysUntilDue(task.dueDate);
                    return days < 0 ? `逾期 ${Math.abs(days)} 天` : `剩餘 ${days} 天`;
                },
                getTaskRowClass(task) {
                    if (task.status === '已完成') return '';
                    const days = this.calculateDaysUntilDue(task.dueDate);
                    return {
                        'table-danger': days < 0,
                        'table-warning': days >= 0 && days <= 3
                    };
                },
                async loadProject() {
                    try {
                        this.loading = true;
                        const response = await axios.get(`/api/ProjectsApi/${this.project.projectId}`);
                        const updatedProject = response.data;
                        this.project = {
                            ...this.project,
                            ...updatedProject,
                            ownerId: updatedProject.ownerId.toString(),
                            startDate: this.formatDate(updatedProject.startDate),
                            endDate: updatedProject.endDate ? this.formatDate(updatedProject.endDate) : '',
                            tasks: updatedProject.tasks || []
                        };
                        this.$nextTick(() => {
                            this.initializeAllEventListeners();
                        });
                        this.error = null;
                    } catch (error) {
                        console.error('Error loading project:', error);
                        this.error = `Failed to load project: ${error.response?.data || error.message}`;
                    } finally {
                        this.loading = false;
                    }
                },
                initializeAllEventListeners() {
                    // 初始化編輯專案與任務相關事件
                    if (!this.editModal) {
                        this.editModal = new bootstrap.Modal(document.getElementById('projectEditModal'));
                    }
                    if (!this.taskCreateModal) {
                        this.taskCreateModal = new bootstrap.Modal(document.getElementById('taskCreateModal'));
                    }
                    const editBtn = document.getElementById('editProjectBtn');
                    if (editBtn) {
                        editBtn.removeEventListener('click', this.showEditModal);
                        editBtn.addEventListener('click', () => this.showEditModal());
                    }
                    const saveBtn = document.getElementById('saveProjectBtn');
                    if (saveBtn) {
                        saveBtn.removeEventListener('click', this.handleSave);
                        saveBtn.addEventListener('click', () => this.handleSave());
                    }
                    const projectModal = document.getElementById('projectEditModal');
                    if (projectModal) {
                        projectModal.removeEventListener('hidden.bs.modal', this.resetFormValidation);
                        projectModal.addEventListener('hidden.bs.modal', () => this.resetFormValidation());
                    }
                    const addTaskBtn = document.getElementById('addTaskBtn');
                    if (addTaskBtn) {
                        addTaskBtn.removeEventListener('click', this.showCreateTaskModal);
                        addTaskBtn.addEventListener('click', () => this.showCreateTaskModal());
                    }
                    const saveTaskBtn = document.getElementById('saveTaskBtn');
                    if (saveTaskBtn) {
                        saveTaskBtn.removeEventListener('click', this.handleSaveTask);
                        saveTaskBtn.addEventListener('click', () => this.handleSaveTask());
                    }
                    const taskModal = document.getElementById('taskCreateModal');
                    if (taskModal) {
                        taskModal.removeEventListener('hidden.bs.modal', this.resetTaskForm);
                        taskModal.addEventListener('hidden.bs.modal', () => this.resetTaskForm());
                    }
                    const deleteButtons = document.querySelectorAll('.delete-task-btn');
                    if (deleteButtons) {
                        deleteButtons.forEach(btn => {
                            btn.removeEventListener('click', this.handleDeleteClick);
                            btn.addEventListener('click', () => this.handleDeleteClick(btn.dataset.taskId));
                        });
                    }
                    if (!this.taskEditModal) {
                        this.taskEditModal = new bootstrap.Modal(document.getElementById('taskEditModal'));
                    }
                    const editButtons = document.querySelectorAll('.edit-task-btn');
                    if (editButtons) {
                        editButtons.forEach(btn => {
                            btn.removeEventListener('click', this.handleEditClick);
                            btn.addEventListener('click', () => {
                                const taskId = parseInt(btn.dataset.taskId);
                                this.handleEditClick(taskId);
                            });
                        });
                    }
                    const updateTaskBtn = document.getElementById('updateTaskBtn');
                    if (updateTaskBtn) {
                        updateTaskBtn.removeEventListener('click', this.updateTask);
                        updateTaskBtn.addEventListener('click', () => this.updateTask());
                    }
                    const taskEditModal = document.getElementById('taskEditModal');
                    if (taskEditModal) {
                        taskEditModal.removeEventListener('hidden.bs.modal', this.resetEditTaskForm);
                        taskEditModal.addEventListener('hidden.bs.modal', () => this.resetEditTaskForm());
                    }
                },
                showEditModal() {
                    if (this.editModal) {
                        this.project.startDate = this.formatDate(this.project.startDate);
                        this.project.endDate = this.project.endDate ? this.formatDate(this.project.endDate) : '';
                        this.editModal.show();
                    }
                },
                handleSave() {
                    this.saveProject();
                },
                async saveProject() {
                    try {
                        if (!this.validateForm() || !this.validateDates()) {
                            return;
                        }
                        const projectData = {
                            projectId: this.project.projectId,
                            name: this.project.name,
                            description: this.project.description,
                            status: this.project.status,
                            ownerId: parseInt(this.project.ownerId),
                            startDate: this.formatDate(this.project.startDate),
                            ...(this.project.endDate && this.project.endDate !== 'Not Set'
                                ? { endDate: this.formatDate(this.project.endDate) }
                                : {})
                        };
                        const response = await axios.put(`/api/ProjectsApi/${this.project.projectId}`, projectData);
                        if (response.data) {
                            const updatedProject = response.data;
                            const currentTasks = this.project.tasks;
                            this.project = {
                                ...this.project,
                                ...updatedProject,
                                ownerId: updatedProject.ownerId.toString(),
                                startDate: this.formatDate(updatedProject.startDate),
                                endDate: updatedProject.endDate ? this.formatDate(updatedProject.endDate) : '',
                                tasks: currentTasks
                            };
                        } else {
                            await this.loadProject();
                        }
                        this.editModal.hide();
                        alert('Project updated successfully');
                    } catch (error) {
                        console.error('Error updating project:', error);
                        alert(`Failed to update project: ${error.response?.data || error.message}`);
                    }
                },
                validateForm() {
                    const form = document.getElementById('projectEditForm');
                    if (!form.checkValidity()) {
                        event.preventDefault();
                        event.stopPropagation();
                        form.classList.add('was-validated');
                        return false;
                    }
                    return true;
                },
                validateDates() {
                    if (!this.project.endDate || this.project.endDate === 'Not Set') {
                        return true;
                    }
                    const startDate = new Date(this.project.startDate);
                    const endDate = new Date(this.project.endDate);
                    if (endDate < startDate) {
                        document.getElementById('endDate').setCustomValidity('End date must be after start date');
                        return false;
                    }
                    document.getElementById('endDate').setCustomValidity('');
                    return true;
                },
                resetFormValidation() {
                    const form = document.getElementById('projectEditForm');
                    form.classList.remove('was-validated');
                    const inputs = form.querySelectorAll('input, select, textarea');
                    inputs.forEach(input => input.setCustomValidity(''));
                },
                async showCreateTaskModal() {
                    if (!this.taskCreateModal) {
                        this.taskCreateModal = new bootstrap.Modal(document.getElementById('taskCreateModal'));
                    }
                    this.taskForm = {
                        title: '',
                        description: '',
                        status: '未開始',
                        priority: '',
                        dueDate: new Date().toISOString().split('T')[0],
                        assignedToId: null,
                        projectId: this.project.projectId
                    };
                    const form = document.getElementById('taskCreateForm');
                    if (form) {
                        form.classList.remove('was-validateed');
                        const inputs = form.querySelectorAll('input, select, textarea');
                        inputs.forEach(input => input.setCustomValidity(''));
                    }
                    this.taskCreateModal.show();
                },
                handleSaveTask() {
                    if (this.isSubmitting) return;
                    this.createTask();
                },

                handleEditClick(taskId) {
                    const task = this.project.tasks.find(t => t.taskId === taskId);
                    if (task) {
                        const form = document.getElementById('taskEditForm');
                        form.classList.remove('was-validated');
                        form.querySelectorAll('input, select, textarea').forEach(input => {
                            input.setCustomValidity('');
                        });
                        const dueDate = task.dueDate ? new Date(task.dueDate).toISOString().split('T')[0] : '';
                        this.editTaskForm = {
                            taskId: task.taskId,
                            title: task.title,
                            description: task.description,
                            status: task.status,
                            priority: task.priority,
                            dueDate: dueDate,
                            assignedToId: task.assignedToId ? task.assignedToId.toString() : ''
                        };
                        this.taskEditModal.show();
                    }
                },

                validateTaskForm(isEdit = false) {
                    const formId = isEdit ? 'taskEditForm' : 'taskCreateForm';
                    const form = document.getElementById(formId);
                    const formData = isEdit ? this.editTaskForm : this.taskForm;
                    const errors = {};
                    if (!formData.title?.trim()) {
                        errors.title = '標題不能為空';
                    }
                    if (!formData.status) {
                        errors.status = '狀態不能為空';
                    } else if (!this.validationRules.statuses.includes(formData.status)) {
                        errors.status = '請選擇有效的狀態';
                    }
                    if (!formData.priority) {
                        errors.priority = '優先級不能為空';
                    } else if (!this.validationRules.priorities.includes(formData.priority)) {
                        errors.priority = '請選擇有效的優先級';
                    }
                    if (!formData.dueDate) {
                        errors.dueDate = '到期日不能為空';
                    }
                    Object.keys(errors).forEach(field => {
                        const prefix = isEdit ? 'editTask' : 'task';
                        const element = document.getElementById(`${prefix}${field.charAt(0).toUpperCase() + field.slice(1)}`);
                        if (element) {
                            element.setCustomValidity(errors[field]);
                        }
                    });
                    form.classList.add('was-validated');
                    if (!form.hasInputListeners) {
                        form.querySelectorAll('input, select, textarea').forEach(input => {
                            input.addEventListener('input', () => {
                                input.setCustomValidity('');
                            });
                        });
                        form.hasInputListeners = true;
                    }
                    return Object.keys(errors).length === 0;
                },
                async createTask() {
                    if (!this.validateTaskForm(false)) return;
                    try {
                        this.isSubmitting = true;
                        const saveBtn = document.getElementById('saveTaskBtn');
                        saveBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-1"></span>建立中...';
                        let formattedDate = this.taskForm.dueDate;
                        if (formattedDate) {
                            const date = new Date(formattedDate);
                            if (!isNaN(date.getTime())) {
                                const localDate = new Date(Date.UTC(
                                    date.getFullYear(),
                                    date.getMonth(),
                                    date.getDate(),
                                    0, 0, 0
                                ));
                                formattedDate = localDate.toISOString();
                            }
                        }
                        const taskData = {
                            title: this.taskForm.title.trim(),
                            description: this.taskForm.description?.trim() || '',
                            status: this.taskForm.status,
                            priority: this.taskForm.priority,
                            dueDate: formattedDate,
                            assignedToId: this.taskForm.assignedToId ? parseInt(this.taskForm.assignedToId) : null
                        };
                        const response = await axios.post(`/api/ProjectsApi/${this.project.projectId}/tasks`, taskData);
                        if (response.data) {
                            await this.loadProject();
                            this.taskCreateModal.hide();
                            alert('任務建立成功');
                        }
                    } catch (error) {
                        console.error('Error creating task:', error);
                        let errorMessage = '建立任務時發生錯誤';
                        if (error.response?.data) {
                            const errorResponse = error.response.data;
                            if (typeof errorResponse === 'object') {
                                if (errorResponse.message) {
                                    errorMessage = errorResponse.message;
                                }
                            } else if (typeof errorResponse === 'string') {
                                errorMessage = errorResponse;
                            }
                        }
                        alert(errorMessage);
                        if (typeof errorMessage === 'string' && errorMessage.indexOf('標題已存在') === -1) {
                            this.resetTaskForm();
                        }
                    } finally {
                        this.isSubmitting = false;
                        const saveBtn = document.getElementById('saveTaskBtn');
                        saveBtn.innerHTML = '建立任務';
                    }
                },
                async updateTask() {
                    if (this.isSubmitting) return;
                    if (!this.validateTaskForm(true)) {
                        return;
                    }
                    try {
                        this.isSubmitting = true;
                        const updateBtn = document.getElementById('updateTaskBtn');
                        updateBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-1"></span>更新中...';
                        let formattedDate = this.editTaskForm.dueDate;
                        if (formattedDate) {
                            const date = new Date(formattedDate);
                            if (!isNaN(date.getTime())) {
                                const localDate = new Date(Date.UTC(
                                    date.getFullYear(),
                                    date.getMonth(),
                                    date.getDate(),
                                    0, 0, 0
                                ));
                                formattedDate = localDate.toISOString();
                            }
                        }
                        const taskData = {
                            taskId: this.editTaskForm.taskId,
                            title: this.editTaskForm.title.trim(),
                            description: this.editTaskForm.description?.trim() || '',
                            status: this.editTaskForm.status,
                            priority: this.editTaskForm.priority,
                            dueDate: formattedDate,
                            assignedToId: this.editTaskForm.assignedToId ? parseInt(this.editTaskForm.assignedToId) : null
                        };
                        const response = await axios.put(`/api/ProjectsApi/${this.project.projectId}/tasks/${this.editTaskForm.taskId}`, taskData);
                        if (response.data) {
                            await this.loadProject();
                            this.taskEditModal.hide();
                            alert('任務更新成功');
                        }
                    } catch (error) {
                        console.error('Error updating task:', error);
                        let errorMessage = '更新任務時發生錯誤';
                        if (error.response?.data) {
                            const errorResponse = error.response.data;
                            if (errorResponse.message) {
                                errorMessage = `${errorResponse.message} (錯誤代碼: ${errorResponse.statusCode})`;
                            }
                        }
                        alert(errorMessage);
                    } finally {
                        this.isSubmitting = false;
                        const updateBtn = document.getElementById('updateTaskBtn');
                        updateBtn.innerHTML = '更新任務';
                    }
                },
                resetTaskForm() {
                    this.taskForm = {
                        title: '',
                        description: '',
                        status: '',
                        priority: '',
                        dueDate: this.formatDate(new Date()),
                        assignedToId: '',
                        projectId: this.project.projectId
                    };
                    const form = document.getElementById('taskCreateForm');
                    if (form) {
                        form.classList.remove('was-validated');
                        const inputs = form.querySelectorAll('input, select, textarea');
                        inputs.forEach(input => input.setCustomValidity(''));
                    }
                },
                resetEditTaskForm() {
                    this.editTaskForm = {
                        taskId: null,
                        title: '',
                        description: '',
                        status: '',
                        priority: '',
                        dueDate: '',
                        assignedToId: null
                    };
                    const form = document.getElementById('taskEditForm');
                    if (form) {
                        form.classList.remove('was-validated');
                        const inputs = form.querySelectorAll('input, select, textarea');
                        inputs.forEach(input => input.setCustomValidity(''));
                    }
                },
                handleDeleteClick(taskId) {
                    if (taskId && confirm('確定要刪除此任務嗎？')) {
                        this.deleteTask(taskId);
                    }
                },
                async deleteTask(taskId) {
                    try {
                        this.isSubmitting = true;
                        const response = await axios.delete(`/api/ProjectsApi/${this.project.projectId}/tasks/${taskId}`);
                        if (response.data.success) {
                            await this.loadProject();
                            alert('任務刪除成功');
                        }
                    } catch (error) {
                        console.error('Error deleting task:', error);
                        const errorMessage = error.response?.data?.message || '刪除任務時發生錯誤';
                        alert(errorMessage);
                    } finally {
                        this.isSubmitting = false;
                    }
                },
                // 新增：顯示任務描述的資訊卡（Modal）
                showTaskDescription(task) {
                    // 如果 description 為空則顯示 "描述為空"
                    this.currentTaskDescription = task.description && task.description.trim() ? task.description : "描述為空";
                    if (this.taskInfoModal === null) {
                        this.taskInfoModal = new bootstrap.Modal(document.getElementById('taskInfoModal'));
                    }
                    this.taskInfoModal.show();
                }
            },
            mounted() {
                this.loadProject();
            }
        }).mount('#app');
    </script>
}
